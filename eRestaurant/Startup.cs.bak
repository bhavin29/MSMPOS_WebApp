using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using RocketPOS.Models;
using RocketPOS.Repository;
using RocketPOS.Services;
using RocketPOS.Interface.Services;
using RocketPOS.Interface.Repository;
using Microsoft.AspNetCore.Mvc;
using System.Globalization;
using Microsoft.AspNetCore.Localization;

namespace RocketPOS
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
            services.Configure<ReadConfig>(Configuration.GetSection("Data"));
            services.AddLocalization(o => { o.ResourcesPath = "Resources"; });
            services.AddMvc(option => option.EnableEndpointRouting = false);
            services.AddRazorPages();

            services.AddOptions<IngredientModel>().ValidateDataAnnotations();
            services.AddControllersWithViews();

            services.AddScoped<IIngredientService, IngredientService>();
            services.AddScoped<IIngredientRepository, IngredientRepository>();
            services.AddScoped<IDropDownService, DropDownService>();
            services.AddScoped<IDropDownRepository, DropDownRepository>();

            services.AddScoped<IAddonsService, AddonsService>();
            services.AddScoped<IAddonsRepository, AddonsRepository>();
            services.AddScoped<IIngredientUnitService, IngredientUnitService>();
            services.AddScoped<IIngredientUnitRepository, IngredientUnitRepository>();
            services.AddScoped<IIngredientCategoryService, IngredientCategoryService>();
            services.AddScoped<IIngredientCategoryRepository, IngredientCategoryRepository>();
            services.AddScoped<IExpsenseCategoryRepository, ExpsenseCategoryRepository>();
            services.AddScoped<IExpsenseCategoryService, ExpsenseCategoryService>();
            services.AddScoped<IFoodMenuCatagoryRepository, FoodMenuCatagoryRepository>();
            services.AddScoped<IFoodMenuCatagoryService, FoodMenuCatagoryService>();
            services.AddScoped<IBankRepository, BankRepository>();
            services.AddScoped<IBankService, BankService>();
            services.AddScoped<IStoreService, StoreService>();
            services.AddScoped<IStoreRepository, StoreRepository>();
            services.AddScoped<ISupplierService, SupplierService>();
            services.AddScoped<ISupplierRepository, SupplierRepository>();
            services.AddScoped<IOutletRepository, OutletRepository >();
            services.AddScoped<IOutletService, OutletService>();
            services.AddScoped<ICustomerRepository, CustomerRepository>();
            services.AddScoped<ICustomerService, CustomerService>();
            services.AddScoped<ICardTerminalService, CardTerminalService>();
            services.AddScoped<ICardTerminalRepository, CardTerminalRepository>();
            services.AddScoped<IPaymentMethodRepository, PaymentMethodRepository>();
            services.AddScoped<IPaymentMethodService, PaymentMethodService>();
            services.AddScoped<IVarientService, VarientService>();
            services.AddScoped<IVarientRepository, VarientRepository>();
            services.AddScoped<ITablesRpository, TablesRepository>();
            services.AddScoped<ITablesService, TablesService>();
            services.AddScoped<IUserRepository, UserRepository>();
            services.AddScoped<IUserService, UserService>();
            services.AddScoped<IFoodMenuRpository, FoodMenuRepository>();
            services.AddScoped<IFoodMenuService, FoodMenuService>();
            services.AddScoped<IEmployeeRepository, EmployeeRepository>();
            services.AddScoped<IEmployeeService, EmployeeService>();
           services.AddScoped<IEmployeeAttendanceRpository, EmployeeAttendanceRepository>();
            services.AddScoped<IEmployeeAttendanceService, EmployeeAttendanceService>();
            services.AddHttpClient();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseStaticFiles();

            IList<CultureInfo> supportedCultures = new List<CultureInfo>
            {
                new CultureInfo("en-US"),
                new CultureInfo("no"),
            };
            app.UseRequestLocalization(new RequestLocalizationOptions
            {
                DefaultRequestCulture = new RequestCulture("en-US"),
                SupportedCultures = supportedCultures,
                SupportedUICultures = supportedCultures
            });


            app.UseDeveloperExceptionPage();
            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });



            //if (env.IsDevelopment())
            //{
            //    app.UseDeveloperExceptionPage();
            //}
            //else
            //{
            //    app.UseExceptionHandler("/Home/Error");
            //    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
            //    app.UseHsts();
            //}
            //app.UseHttpsRedirection();
            //app.UseStaticFiles();

            //app.UseRouting();

            //app.UseAuthorization();

            //app.UseMvc(routes =>
            //{
            //    routes.MapRoute(
            //        name: "default",
            //        template: "{controller=Home}/{action=Index}/{id?}");
            //});

            //app.UseEndpoints(endpoints =>
            //{
            //    endpoints.MapControllerRoute(
            //        name: "default",
            //        pattern: "{controller=Home}/{action=Index}/{id?}");
            //});
        }
    }
}
